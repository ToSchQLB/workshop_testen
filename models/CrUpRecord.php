<?php
/**
 * Created by PhpStorm.
 * User: Toni.Schreiber
 * Date: 30.11.2018
 * Time: 14:38
 */

namespace app\models;

use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

/**
 * @property User updateUser
 * @property User createUser
 */
class CrUpRecord extends ActiveRecord
{
    public static $labelColumn = 'name';

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors[] = [
            'class' => TimestampBehavior::className(),
            'attributes' => [
                ActiveRecord::EVENT_BEFORE_INSERT => ['crti','upti'],
                ActiveRecord::EVENT_BEFORE_UPDATE => ['upti']
            ],
            'value' => new Expression('NOW()')
        ];
        $behaviors[] = [
            'class' => AttributeBehavior::className(),
            'attributes' => [
                ActiveRecord::EVENT_BEFORE_INSERT => ['crus','upus'],
                ActiveRecord::EVENT_BEFORE_UPDATE => ['upus']
            ],
            'value' => function () { return Yii::$app->user->id; }
        ];
        return $behaviors;
    }

    public function attributeLabels()
    {
        return [
            'crti' => Yii::t('app', 'erstellt am'),
            'crus' => Yii::t('app', 'erstellt von'),
            'upti' => Yii::t('app', 'bearbeitet am'),
            'upus' => Yii::t('app', 'bearbeitet von'),
            'updateUser.name' => Yii::t('app', 'bearbeitet von'),
            'createUser.name' => Yii::t('app', 'erstellt von'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdateUser()
    {
        return $this->hasOne(User::className(), ['id' => 'upus']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreateUser()
    {
        return $this->hasOne(User::className(), ['id' => 'crus']);
    }

    /**
     * gibt die ID => labelColumn(meist name) zurÃ¼ck
     * @return array
     */
    public static function allArray()
    {
        return ArrayHelper::map(static::find()->asArray()->all(), 'id', self::$labelColumn);
    }
}
<?php

namespace app\models\search;

use toschqlb\filterhelper\FilterHelper;
use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Ticket;
use yii\helpers\ArrayHelper;

/**
 * TicketSearch represents the model behind the search form of `app\models\Ticket`.
 */
class TicketSearch extends Ticket
{

    public function attributes()
    {
        return array_merge(
            parent::attributes(),
            [
                'projekt.name','ticketKategorie.name','bearbeiter.name','ticketStatus.name','createUser.name'
            ]
        );
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'projekt_id', 'ticket_kategorie_id', 'bearbeiter_id', 'ticket_status_id', 'crus', 'upus'], 'integer'],
            [['titel', 'beschreibung', 'crti', 'upti', 'projekt.name', 'ticketKategorie.name', 'bearbeiter.name',
                'ticketStatus.name', 'createUser.name'], 'safe'],
        ];
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(
            parent::attributeLabels(),
            [
                    'ticketKategorie.name' => Yii::t('ticket', 'Ticketkatgorie'),
                    'bearbeiter.name' => Yii::t('ticket', 'Bearbeiter'),
            ]
        ); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Ticket::find();
        $query->joinWith(['projekt','bearbeiter b','createUser u','ticketStatus','ticketKategorie']);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $dataProvider->sort->attributes['projekt.name'] = [
            'asc' => [ 'projekt.name' => SORT_ASC],
            'desc'=> [ 'projekt.name' => SORT_DESC]
        ];
        $dataProvider->sort->attributes['ticketKategorie.name'] = [
            'asc' => [ 'ticket_kategorie.name' => SORT_ASC],
            'desc'=> [ 'ticket_kategorie.name' => SORT_DESC]
        ];
        $dataProvider->sort->attributes['bearbeiter.name'] = [
            'asc' => [ 'b.name' => SORT_ASC],
            'desc'=> [ 'b.name' => SORT_DESC]
        ];
        $dataProvider->sort->attributes['ticketStatus.name'] = [
            'asc' => [ 'ticket_status.name' => SORT_ASC],
            'desc'=> [ 'ticket_status.name' => SORT_DESC]
        ];
        $dataProvider->sort->attributes['createUser.name'] = [
            'asc' => [ 'u.name' => SORT_ASC],
            'desc'=> [ 'u.name' => SORT_DESC]
        ];

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'projekt_id' => $this->getAttribute('projekt.name'),
            'ticket_kategorie_id' => $this->getAttribute('ticketKategorie.name'),
            'bearbeiter_id' => $this->getAttribute('bearbeiter.name'),
            'ticket.ticket_status_id' => $this->getAttribute('ticketStatus.name'),
            'ticket.crus' => $this->getAttribute('createUser.name')
        ]);

        $query->andFilterWhere(['like', 'titel', $this->titel])
            ->andFilterWhere(['like', 'beschreibung', $this->beschreibung])
            ->andFilterWhere(FilterHelper::getDateConditionArray('ticket.crti', $this->crti))
            ->andFilterWhere(FilterHelper::getDateConditionArray('ticket.upti', $this->upti))
        ;

        return $dataProvider;
    }
}
